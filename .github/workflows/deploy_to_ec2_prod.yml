name: Host pockity server on EC2 using image in ECR for production environment

on:
  push:
    branches:
      - prod

jobs:
  Build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials for access to ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 3: Log in to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Get the current commit hash to tag the Docker image
      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      # Step 5: Verify the build
      - name: Verify Build
        id: verify-build
        run: |
          echo "Verifying the build..."
          npm install
          npm run build
          echo "Build verified successfully."

      # Step 6: Build, tag, and push the Docker image to Amazon ECR
      - name: Build, Tag, and Push Docker Image to ECR
        run: |
          echo "Building Docker image with the latest commit hash tag and 'latest' tag..."

          # Build the Docker image with both the commit hash and the 'latest' tag
          docker buildx build --platform linux/amd64 -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ steps.get-commit-hash.outputs.commit-hash }} -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:latest .

          echo "Pushing Docker image with the commit hash and latest tag to ECR..."

          # Push the Docker image tagged with the commit hash
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ steps.get-commit-hash.outputs.commit-hash }}

          # Push the Docker image tagged as 'latest'
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:latest

      # Step 7: Setup SSH key for secure connection to EC2
      - name: Setup SSH Key
        run: |
          echo "Setting up SSH key for EC2..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.EC2_IP}} >> ~/.ssh/known_hosts
          echo "SSH key setup completed."

      # Step 8: Deploy the image to EC2
      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."

          # SSH into the EC2 instance and perform the deployment
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{secrets.EC2_IP}} "
            echo 'Logging into ECR...'
            # Login to Amazon ECR to access the Docker image
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }};
            
            echo 'Cleaning up old Docker images...'
            # Clean up old Docker images to free up space
            docker system prune -af;
            
            echo 'Pulling the latest Docker image...'
            # Pull the latest Docker image for the backend from ECR
            docker compose pull

            echo 'Running the Docker container with environment variables...'
            # Pass environment variables only for the container's runtime
            docker compose up -d
          "
