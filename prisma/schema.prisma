generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  USER
  ADMIN
}

//  MODELS

//  Users: email/password or external providers.
//  - passwordHash: for traditional auth
//  - emailVerified: boolean
//  - provider fields handled via ProviderAccount
//  - role to allow admin operations (approvals)
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  apiKeys ApiKey[]
}

//  ApiKey: many keys per user.
//  - Each key can be assigned a tier independently.
//  - secretHash stored (hash of secret). Show secret only when created.
// - metadata JSON for custom policies/scopes
model ApiKey {
  id          String    @id @default(cuid())
  accessKeyId String    @unique
  secretHash  String
  name        String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?
  revokedAt   DateTime?
  metadata    Json?

  currentUsage UsageCurrent?
  auditLogs    AuditLog[]

  @@index([userId])
}

//  UsageCurrent: a single row per user for current usage (fast increment/decrement)
//  - bytesUsed: BigInt
//  - objects: Int
//  - lastUpdated: timestamp of last change
//  - This acts as a fast counter. Snapshots (UsageSnapshot) provide history.
model UsageCurrent {
  id             String   @id @default(cuid())
  apiAccessKeyId String   @unique
  apiAccessKey   ApiKey   @relation(fields: [apiAccessKeyId], references: [accessKeyId])
  bytesUsed      BigInt   @default(0)
  objects        Int      @default(0)
  lastUpdated    DateTime @default(now())
}

//  AuditLog: immutable logs for important actions (apikey create/revoke, tier requests, payments)
model AuditLog {
  id             String   @id @default(cuid())
  apiAccessKeyId String?
  apiAccessKey   ApiKey?  @relation(fields: [apiAccessKeyId], references: [accessKeyId])
  actorId        String? // admin or system actor id (nullable)
  action         String // short action key, e.g., 'APIKEY_CREATE', 'TIER_APPROVE'
  detail         String? // human readable detail
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([apiAccessKeyId])
  @@index([action])
}
