generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ApiKeyRequestType {
  CREATE
  UPGRADE
}

enum ApiKeyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  apiKeys        ApiKey[]
  otp            Otp?
  apiKeyRequests ApiKeyRequest[]
}

model ApiKey {
  id           String    @id @default(cuid())
  accessKeyId  String    @unique
  secretHash   String
  name         String?
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  totalStorage BigInt    @default(0)
  totalObjects Int       @default(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?
  revokedAt    DateTime?
  metadata     Json?

  currentUsage  UsageCurrent?
  auditLogs     AuditLog[]
  apiKeyRequest ApiKeyRequest[]

  @@index([userId])
}

model UsageCurrent {
  id             String   @id @default(cuid())
  apiAccessKeyId String   @unique
  apiAccessKey   ApiKey   @relation(fields: [apiAccessKeyId], references: [accessKeyId])
  bytesUsed      BigInt   @default(0)
  objects        Int      @default(0)
  lastUpdated    DateTime @default(now())
}

model AuditLog {
  id             String   @id @default(cuid())
  apiAccessKeyId String?
  apiAccessKey   ApiKey?  @relation(fields: [apiAccessKeyId], references: [accessKeyId])
  actorId        String?
  action         String
  detail         String?
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([apiAccessKeyId])
  @@index([action])
}

model Otp {
  id     String   @id @default(cuid())
  otp    String   @default(cuid())
  expiry DateTime
  userId String   @unique
  user   User     @relation(fields: [userId], references: [id])
}

model ApiKeyRequest {
  id               String              @id @default(cuid())
  userId           String
  user             User                @relation(fields: [userId], references: [id])
  requestType      ApiKeyRequestType   @default(CREATE)
  keyName          String?
  apiAccessKeyId   String?
  apiAccessKey     ApiKey?             @relation(fields: [apiAccessKeyId], references: [id])
  requestedStorage BigInt
  requestedObjects Int
  reason           String?
  status           ApiKeyRequestStatus @default(PENDING)
  reviewerId       String?
  reviewerComment  String?
  reviewedAt       DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([userId])
  @@index([status])
}
